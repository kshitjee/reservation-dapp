{
  "address": "0xf14e0ff12C9075f95AAd3F23df70928E3657345c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_eventImplementation",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Auction__BidTooLow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Auction__NotEnoughFunds",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idsLength",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "suppliesLength",
          "type": "uint256"
        }
      ],
      "name": "Auction__TokenIdsDoNotMatchTokenSupplies",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Auction__UnauthorizedCaller",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "eventAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "baseMetaDataURI",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "organizer",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "baseMetadataURI",
              "type": "string"
            },
            {
              "internalType": "uint256[]",
              "name": "tokenIds",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "tokenSupplies",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "tokenStatus",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "minBids",
              "type": "uint256[]"
            }
          ],
          "indexed": false,
          "internalType": "struct Auction.Event",
          "name": "event0",
          "type": "tuple"
        }
      ],
      "name": "EventListed",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_baseMetadataURI",
          "type": "string"
        },
        {
          "internalType": "uint256[]",
          "name": "_tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_tokenSupplies",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_tokenStatus",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_minBids",
          "type": "uint256[]"
        }
      ],
      "name": "createEvent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_eventAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "placeBid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_eventAddress",
          "type": "address"
        }
      ],
      "name": "settleAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_eventAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_newBid",
          "type": "uint256"
        }
      ],
      "name": "updateMinBid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe8ce29f0504ef9ef21616f59dde0e8447c3c00a9fa32bd30cb153ef5d014153a",
  "receipt": {
    "to": null,
    "from": "0x0c670AcA9AA0285B961F1D4AB7D4e462C7982311",
    "contractAddress": "0xf14e0ff12C9075f95AAd3F23df70928E3657345c",
    "transactionIndex": 10,
    "gasUsed": "1375868",
    "logsBloom": "0x
    "blockHash": "0xa6dbbf1f33ca47eef81c22a275f11d1231190830424f12b54bb87ec327f21a09",
    "transactionHash": "0xe8ce29f0504ef9ef21616f59dde0e8447c3c00a9fa32bd30cb153ef5d014153a",
    "logs": [],
    "blockNumber": 8476989,
    "cumulativeGasUsed": "4879815",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x435C7bFd1895410718fe9e190ce2050857345107"
  ],
  "numDeployments": 2,
  "solcInputHash": "83a759222b90e26626796f46213a9387",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_eventImplementation\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Auction__BidTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Auction__NotEnoughFunds\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idsLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"suppliesLength\",\"type\":\"uint256\"}],\"name\":\"Auction__TokenIdsDoNotMatchTokenSupplies\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Auction__UnauthorizedCaller\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"eventAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"baseMetaDataURI\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"organizer\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"baseMetadataURI\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenSupplies\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenStatus\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"minBids\",\"type\":\"uint256[]\"}],\"indexed\":false,\"internalType\":\"struct Auction.Event\",\"name\":\"event0\",\"type\":\"tuple\"}],\"name\":\"EventListed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_baseMetadataURI\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenSupplies\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenStatus\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_minBids\",\"type\":\"uint256[]\"}],\"name\":\"createEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_eventAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"placeBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_eventAddress\",\"type\":\"address\"}],\"name\":\"settleAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_eventAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newBid\",\"type\":\"uint256\"}],\"name\":\"updateMinBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Auction.sol\":\"Auction\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x888d64d221d52c31d015b76e50ca1af5ef8ff076550810b49cea6b01d8267a10\",\"license\":\"MIT\"},\"contracts/Auction.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/* imports */\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport \\\"../interfaces/IEvent.sol\\\";\\n\\n/* errors */\\nerror Auction__TokenIdsDoNotMatchTokenSupplies(\\n  uint256 idsLength,\\n  uint256 suppliesLength\\n);\\nerror Auction__OnlyEventOwnerCanCall(address caller);\\nerror Auction__BidTooLow();\\nerror Auction__NotEnoughFunds();\\nerror Auction__UnauthorizedCaller();\\n\\ncontract Auction {\\n  /* structs and enums */\\n  struct Event {\\n    string name;\\n    address organizer;\\n    string baseMetadataURI;\\n    uint[] tokenIds;\\n    uint[] tokenSupplies;\\n    uint[] tokenStatus;\\n    uint[] minBids;\\n  }\\n\\n  /*  state variables */\\n  address immutable eventImplementation;\\n  mapping(address => Event) addrToEvent;\\n  mapping(address => address) addrToOrg;\\n  mapping(address => uint) addrToNoOfTokenTypes;\\n  mapping(address => mapping(uint => address[])) addrToIdToQueue;\\n  mapping(address => mapping(uint => uint)) addrToIdToMinBid;\\n\\n  /* events */\\n  event EventListed(\\n    address indexed eventAddress,\\n    string indexed baseMetaDataURI,\\n    Event event0\\n  );\\n\\n  /* constructor */\\n  constructor(address _eventImplementation) {\\n    eventImplementation = _eventImplementation;\\n  }\\n\\n  /* external functions */\\n  function createEvent(\\n    string memory _name,\\n    string memory _baseMetadataURI,\\n    uint256[] memory _tokenIds,\\n    uint256[] memory _tokenSupplies,\\n    uint256[] memory _tokenStatus,\\n    uint256[] memory _minBids\\n  ) external {\\n    if (_tokenIds.length != _tokenSupplies.length) {\\n      revert Auction__TokenIdsDoNotMatchTokenSupplies(\\n        _tokenIds.length,\\n        _tokenSupplies.length\\n      );\\n    }\\n    address eventAddress = Clones.clone(eventImplementation);\\n    IEvent(eventAddress).initialize(\\n      msg.sender,\\n      address(this),\\n      _baseMetadataURI\\n    );\\n    Event memory newEvent = Event(\\n      _name,\\n      address(this),\\n      _baseMetadataURI,\\n      _tokenIds,\\n      _tokenSupplies,\\n      _tokenStatus,\\n      _minBids\\n    );\\n    addrToNoOfTokenTypes[eventAddress] = _tokenIds.length;\\n    addrToEvent[eventAddress] = newEvent;\\n    addrToOrg[eventAddress] = msg.sender;\\n\\n    for (uint i = 0; i < _tokenIds.length; i++) {\\n      addrToIdToMinBid[eventAddress][i] = _minBids[i];\\n    }\\n    emit EventListed(eventAddress, _baseMetadataURI, newEvent);\\n  }\\n\\n  function updateMinBid(\\n    address _eventAddress,\\n    uint _tokenId,\\n    uint _newBid\\n  ) external {\\n    addrToIdToMinBid[_eventAddress][_tokenId] = _newBid;\\n  }\\n\\n  function placeBid(\\n    address _eventAddress,\\n    uint _tokenId,\\n    uint _amount\\n  ) external {\\n    if (_amount < addrToIdToMinBid[_eventAddress][_tokenId]) {\\n      revert Auction__BidTooLow();\\n    }\\n    if (msg.sender.balance < addrToIdToMinBid[_eventAddress][_tokenId]) {\\n      revert Auction__NotEnoughFunds();\\n    }\\n    addrToIdToQueue[_eventAddress][_tokenId].push(msg.sender);\\n  }\\n\\n  function settleAuction(address _eventAddress) external {\\n    if (msg.sender != addrToOrg[_eventAddress]) {\\n      revert Auction__UnauthorizedCaller();\\n    }\\n    for (uint i = 0; i < addrToNoOfTokenTypes[_eventAddress]; i++) {\\n        delete addrToIdToQueue[_eventAddress][i];\\n    delete addrToIdToMinBid[_eventAddress][i];\\n      for (uint j = 0; j < addrToIdToQueue[_eventAddress][i].length; j++) {\\n        IEvent(_eventAddress).mint(addrToIdToQueue[_eventAddress][i][j], i, 1);\\n      }\\n    }\\n\\n    delete addrToEvent[_eventAddress];\\n    delete addrToOrg[_eventAddress];\\n    delete addrToNoOfTokenTypes[_eventAddress];\\n  }\\n\\n  //   function buyNow(\\n  //     address _eventAddress,\\n  //     uint _tokenId,\\n  //     uint _amountOfTokens\\n  //   ) external {}\\n\\n  // function transferBalance() external {}\\n  // function deleteAuction() external {}\\n}\\n\",\"keccak256\":\"0x34525703601b78935d8ada6bf470b7ff18d513e5c3f6c90682a2a25db47f9bd7\",\"license\":\"MIT\"},\"interfaces/IEvent.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\n/* COLLECTION INTERFACE */\\ninterface IEvent {\\n  function initialize(address _organizer, address _auctionContract, string memory _baseMetadataURI) external;\\n\\n  function mint(\\n    address _to,\\n    uint256 _id,\\n    uint256 _amount\\n  ) external;\\n}\",\"keccak256\":\"0xf17fdac1fc7099789c18e824822cdf7a14cf30b69d11081868e8f1560d0567a0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162001916380380620019168339818101604052810190620000379190620000dc565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050506200010e565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000a48262000077565b9050919050565b620000b68162000097565b8114620000c257600080fd5b50565b600081519050620000d681620000ab565b92915050565b600060208284031215620000f557620000f462000072565b5b60006200010584828501620000c5565b91505092915050565b6080516117ec6200012a60003960006107fd01526117ec6000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806304717aca146100515780633b4fb5471461006d5780637df0bf9514610089578063f6ac9361146100a5575b600080fd5b61006b60048036038101906100669190610eab565b6100c1565b005b61008760048036038101906100829190610efe565b6102a2565b005b6100a3600480360381019061009e9190610eab565b610752565b005b6100bf60048036038101906100ba9190611139565b6107ac565b005b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000205481101561014b576040517f95b79dad00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020543373ffffffffffffffffffffffffffffffffffffffff163110156101ec576040517fe315224600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610366576040517f1e37ef0200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548110156105e157600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828152602001908152602001600020600061040c9190610c91565b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008281526020019081526020016000206000905560005b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020805490508110156105cd578273ffffffffffffffffffffffffffffffffffffffff1663156e29f6600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000858152602001908152602001600020838154811061053c5761053b61126e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168460016040518463ffffffff1660e01b815260040161058893929190611300565b600060405180830381600087803b1580156105a257600080fd5b505af11580156105b6573d6000803e3d6000fd5b5050505080806105c590611366565b915050610463565b5080806105d990611366565b915050610369565b506000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600080820160006106319190610cb2565b6001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556002820160006106689190610cb2565b6003820160006106789190610cf2565b6004820160006106889190610cf2565b6005820160006106989190610cf2565b6006820160006106a89190610cf2565b5050600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000905550565b80600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002081905550505050565b82518451146107f657835183516040517f604cd0690000000000000000000000000000000000000000000000000000000081526004016107ed9291906113af565b60405180910390fd5b60006108217f0000000000000000000000000000000000000000000000000000000000000000610bd6565b90508073ffffffffffffffffffffffffffffffffffffffff16634571e3a63330896040518463ffffffff1660e01b815260040161086093929190611460565b600060405180830381600087803b15801561087a57600080fd5b505af115801561088e573d6000803e3d6000fd5b5050505060006040518060e001604052808981526020013073ffffffffffffffffffffffffffffffffffffffff1681526020018881526020018781526020018681526020018581526020018481525090508551600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082015181600001908051906020019061097f929190610d13565b5060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020190805190602001906109e3929190610d13565b506060820151816003019080519060200190610a00929190610d99565b506080820151816004019080519060200190610a1d929190610d99565b5060a0820151816005019080519060200190610a3a929190610d99565b5060c0820151816006019080519060200190610a57929190610d99565b5090505033600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060005b8651811015610b6757838181518110610af857610af761126e565b5b6020026020010151600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020819055508080610b5f90611366565b915050610adc565b5086604051610b7691906114da565b60405180910390208273ffffffffffffffffffffffffffffffffffffffff167f453e81195773858555ccc0789dabe88873f10681c642e18bac04a531667ef5a883604051610bc491906116c7565b60405180910390a35050505050505050565b6000763d602d80600a3d3981f3363d3d373d3d3d363d730000008260601b60e81c176000526e5af43d82803e903d91602b57fd5bf38260781b17602052603760096000f09050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610c8c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c8390611735565b60405180910390fd5b919050565b5080546000825590600052602060002090810190610caf9190610de6565b50565b508054610cbe90611784565b6000825580601f10610cd05750610cef565b601f016020900490600052602060002090810190610cee9190610de6565b5b50565b5080546000825590600052602060002090810190610d109190610de6565b50565b828054610d1f90611784565b90600052602060002090601f016020900481019282610d415760008555610d88565b82601f10610d5a57805160ff1916838001178555610d88565b82800160010185558215610d88579182015b82811115610d87578251825591602001919060010190610d6c565b5b509050610d959190610de6565b5090565b828054828255906000526020600020908101928215610dd5579160200282015b82811115610dd4578251825591602001919060010190610db9565b5b509050610de29190610de6565b5090565b5b80821115610dff576000816000905550600101610de7565b5090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610e4282610e17565b9050919050565b610e5281610e37565b8114610e5d57600080fd5b50565b600081359050610e6f81610e49565b92915050565b6000819050919050565b610e8881610e75565b8114610e9357600080fd5b50565b600081359050610ea581610e7f565b92915050565b600080600060608486031215610ec457610ec3610e0d565b5b6000610ed286828701610e60565b9350506020610ee386828701610e96565b9250506040610ef486828701610e96565b9150509250925092565b600060208284031215610f1457610f13610e0d565b5b6000610f2284828501610e60565b91505092915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610f7e82610f35565b810181811067ffffffffffffffff82111715610f9d57610f9c610f46565b5b80604052505050565b6000610fb0610e03565b9050610fbc8282610f75565b919050565b600067ffffffffffffffff821115610fdc57610fdb610f46565b5b610fe582610f35565b9050602081019050919050565b82818337600083830152505050565b600061101461100f84610fc1565b610fa6565b9050828152602081018484840111156110305761102f610f30565b5b61103b848285610ff2565b509392505050565b600082601f83011261105857611057610f2b565b5b8135611068848260208601611001565b91505092915050565b600067ffffffffffffffff82111561108c5761108b610f46565b5b602082029050602081019050919050565b600080fd5b60006110b56110b084611071565b610fa6565b905080838252602082019050602084028301858111156110d8576110d761109d565b5b835b8181101561110157806110ed8882610e96565b8452602084019350506020810190506110da565b5050509392505050565b600082601f8301126111205761111f610f2b565b5b81356111308482602086016110a2565b91505092915050565b60008060008060008060c0878903121561115657611155610e0d565b5b600087013567ffffffffffffffff81111561117457611173610e12565b5b61118089828a01611043565b965050602087013567ffffffffffffffff8111156111a1576111a0610e12565b5b6111ad89828a01611043565b955050604087013567ffffffffffffffff8111156111ce576111cd610e12565b5b6111da89828a0161110b565b945050606087013567ffffffffffffffff8111156111fb576111fa610e12565b5b61120789828a0161110b565b935050608087013567ffffffffffffffff81111561122857611227610e12565b5b61123489828a0161110b565b92505060a087013567ffffffffffffffff81111561125557611254610e12565b5b61126189828a0161110b565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6112a681610e37565b82525050565b6112b581610e75565b82525050565b6000819050919050565b6000819050919050565b60006112ea6112e56112e0846112bb565b6112c5565b610e75565b9050919050565b6112fa816112cf565b82525050565b6000606082019050611315600083018661129d565b61132260208301856112ac565b61132f60408301846112f1565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061137182610e75565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156113a4576113a3611337565b5b600182019050919050565b60006040820190506113c460008301856112ac565b6113d160208301846112ac565b9392505050565b600081519050919050565b600082825260208201905092915050565b60005b838110156114125780820151818401526020810190506113f7565b83811115611421576000848401525b50505050565b6000611432826113d8565b61143c81856113e3565b935061144c8185602086016113f4565b61145581610f35565b840191505092915050565b6000606082019050611475600083018661129d565b611482602083018561129d565b81810360408301526114948184611427565b9050949350505050565b600081905092915050565b60006114b4826113d8565b6114be818561149e565b93506114ce8185602086016113f4565b80840191505092915050565b60006114e682846114a9565b915081905092915050565b600082825260208201905092915050565b600061150d826113d8565b61151781856114f1565b93506115278185602086016113f4565b61153081610f35565b840191505092915050565b61154481610e37565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61157f81610e75565b82525050565b60006115918383611576565b60208301905092915050565b6000602082019050919050565b60006115b58261154a565b6115bf8185611555565b93506115ca83611566565b8060005b838110156115fb5781516115e28882611585565b97506115ed8361159d565b9250506001810190506115ce565b5085935050505092915050565b600060e08301600083015184820360008601526116258282611502565b915050602083015161163a602086018261153b565b50604083015184820360408601526116528282611502565b9150506060830151848203606086015261166c82826115aa565b9150506080830151848203608086015261168682826115aa565b91505060a083015184820360a08601526116a082826115aa565b91505060c083015184820360c08601526116ba82826115aa565b9150508091505092915050565b600060208201905081810360008301526116e18184611608565b905092915050565b7f455243313136373a20637265617465206661696c656400000000000000000000600082015250565b600061171f6016836113e3565b915061172a826116e9565b602082019050919050565b6000602082019050818103600083015261174e81611712565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061179c57607f821691505b602082108114156117b0576117af611755565b5b5091905056fea2646970667358221220042b1cecbf4fda9f6455ed78aa1a8f26b7ee4c855d2edabb1943dd4d00765bde64736f6c634300080a0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 125,
        "contract": "contracts/Auction.sol:Auction",
        "label": "addrToEvent",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_struct(Event)118_storage)"
      },
      {
        "astId": 129,
        "contract": "contracts/Auction.sol:Auction",
        "label": "addrToOrg",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 133,
        "contract": "contracts/Auction.sol:Auction",
        "label": "addrToNoOfTokenTypes",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 140,
        "contract": "contracts/Auction.sol:Auction",
        "label": "addrToIdToQueue",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_array(t_address)dyn_storage))"
      },
      {
        "astId": 146,
        "contract": "contracts/Auction.sol:Auction",
        "label": "addrToIdToMinBid",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_array(t_address)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => address[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_array(t_address)dyn_storage)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_struct(Event)118_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Auction.Event)",
        "numberOfBytes": "32",
        "value": "t_struct(Event)118_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Event)118_storage": {
        "encoding": "inplace",
        "label": "struct Auction.Event",
        "members": [
          {
            "astId": 101,
            "contract": "contracts/Auction.sol:Auction",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 103,
            "contract": "contracts/Auction.sol:Auction",
            "label": "organizer",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 105,
            "contract": "contracts/Auction.sol:Auction",
            "label": "baseMetadataURI",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 108,
            "contract": "contracts/Auction.sol:Auction",
            "label": "tokenIds",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 111,
            "contract": "contracts/Auction.sol:Auction",
            "label": "tokenSupplies",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 114,
            "contract": "contracts/Auction.sol:Auction",
            "label": "tokenStatus",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 117,
            "contract": "contracts/Auction.sol:Auction",
            "label": "minBids",
            "offset": 0,
            "slot": "6",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}