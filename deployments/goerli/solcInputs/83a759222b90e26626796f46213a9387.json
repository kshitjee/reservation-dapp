{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/proxy/Clones.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/Clones.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\n * deploying minimal proxy contracts, also known as \"clones\".\n *\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\n *\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\n * deterministic method.\n *\n * _Available since v3.4._\n */\nlibrary Clones {\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create opcode, which should never revert.\n     */\n    function clone(address implementation) internal returns (address instance) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\n            // of the `implementation` address with the bytecode before the address.\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\n            instance := create(0, 0x09, 0x37)\n        }\n        require(instance != address(0), \"ERC1167: create failed\");\n    }\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\n     * the clones cannot be deployed twice at the same address.\n     */\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\n            // of the `implementation` address with the bytecode before the address.\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\n            instance := create2(0, 0x09, 0x37, salt)\n        }\n        require(instance != address(0), \"ERC1167: create2 failed\");\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt,\n        address deployer\n    ) internal pure returns (address predicted) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(add(ptr, 0x38), deployer)\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\n            mstore(add(ptr, 0x14), implementation)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\n            mstore(add(ptr, 0x58), salt)\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\n            predicted := keccak256(add(ptr, 0x43), 0x55)\n        }\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(address implementation, bytes32 salt)\n        internal\n        view\n        returns (address predicted)\n    {\n        return predictDeterministicAddress(implementation, salt, address(this));\n    }\n}\n"
    },
    "contracts/Auction.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/* imports */\nimport \"@openzeppelin/contracts/proxy/Clones.sol\";\nimport \"../interfaces/IEvent.sol\";\n\n/* errors */\nerror Auction__TokenIdsDoNotMatchTokenSupplies(\n  uint256 idsLength,\n  uint256 suppliesLength\n);\nerror Auction__OnlyEventOwnerCanCall(address caller);\nerror Auction__BidTooLow();\nerror Auction__NotEnoughFunds();\nerror Auction__UnauthorizedCaller();\n\ncontract Auction {\n  /* structs and enums */\n  struct Event {\n    string name;\n    address organizer;\n    string baseMetadataURI;\n    uint[] tokenIds;\n    uint[] tokenSupplies;\n    uint[] tokenStatus;\n    uint[] minBids;\n  }\n\n  /*  state variables */\n  address immutable eventImplementation;\n  mapping(address => Event) addrToEvent;\n  mapping(address => address) addrToOrg;\n  mapping(address => uint) addrToNoOfTokenTypes;\n  mapping(address => mapping(uint => address[])) addrToIdToQueue;\n  mapping(address => mapping(uint => uint)) addrToIdToMinBid;\n\n  /* events */\n  event EventListed(\n    address indexed eventAddress,\n    string indexed baseMetaDataURI,\n    Event event0\n  );\n\n  /* constructor */\n  constructor(address _eventImplementation) {\n    eventImplementation = _eventImplementation;\n  }\n\n  /* external functions */\n  function createEvent(\n    string memory _name,\n    string memory _baseMetadataURI,\n    uint256[] memory _tokenIds,\n    uint256[] memory _tokenSupplies,\n    uint256[] memory _tokenStatus,\n    uint256[] memory _minBids\n  ) external {\n    if (_tokenIds.length != _tokenSupplies.length) {\n      revert Auction__TokenIdsDoNotMatchTokenSupplies(\n        _tokenIds.length,\n        _tokenSupplies.length\n      );\n    }\n    address eventAddress = Clones.clone(eventImplementation);\n    IEvent(eventAddress).initialize(\n      msg.sender,\n      address(this),\n      _baseMetadataURI\n    );\n    Event memory newEvent = Event(\n      _name,\n      address(this),\n      _baseMetadataURI,\n      _tokenIds,\n      _tokenSupplies,\n      _tokenStatus,\n      _minBids\n    );\n    addrToNoOfTokenTypes[eventAddress] = _tokenIds.length;\n    addrToEvent[eventAddress] = newEvent;\n    addrToOrg[eventAddress] = msg.sender;\n\n    for (uint i = 0; i < _tokenIds.length; i++) {\n      addrToIdToMinBid[eventAddress][i] = _minBids[i];\n    }\n    emit EventListed(eventAddress, _baseMetadataURI, newEvent);\n  }\n\n  function updateMinBid(\n    address _eventAddress,\n    uint _tokenId,\n    uint _newBid\n  ) external {\n    addrToIdToMinBid[_eventAddress][_tokenId] = _newBid;\n  }\n\n  function placeBid(\n    address _eventAddress,\n    uint _tokenId,\n    uint _amount\n  ) external {\n    if (_amount < addrToIdToMinBid[_eventAddress][_tokenId]) {\n      revert Auction__BidTooLow();\n    }\n    if (msg.sender.balance < addrToIdToMinBid[_eventAddress][_tokenId]) {\n      revert Auction__NotEnoughFunds();\n    }\n    addrToIdToQueue[_eventAddress][_tokenId].push(msg.sender);\n  }\n\n  function settleAuction(address _eventAddress) external {\n    if (msg.sender != addrToOrg[_eventAddress]) {\n      revert Auction__UnauthorizedCaller();\n    }\n    for (uint i = 0; i < addrToNoOfTokenTypes[_eventAddress]; i++) {\n        delete addrToIdToQueue[_eventAddress][i];\n    delete addrToIdToMinBid[_eventAddress][i];\n      for (uint j = 0; j < addrToIdToQueue[_eventAddress][i].length; j++) {\n        IEvent(_eventAddress).mint(addrToIdToQueue[_eventAddress][i][j], i, 1);\n      }\n    }\n\n    delete addrToEvent[_eventAddress];\n    delete addrToOrg[_eventAddress];\n    delete addrToNoOfTokenTypes[_eventAddress];\n  }\n\n  //   function buyNow(\n  //     address _eventAddress,\n  //     uint _tokenId,\n  //     uint _amountOfTokens\n  //   ) external {}\n\n  // function transferBalance() external {}\n  // function deleteAuction() external {}\n}\n"
    },
    "interfaces/IEvent.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\n/* COLLECTION INTERFACE */\ninterface IEvent {\n  function initialize(address _organizer, address _auctionContract, string memory _baseMetadataURI) external;\n\n  function mint(\n    address _to,\n    uint256 _id,\n    uint256 _amount\n  ) external;\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}